<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

var width = 250,
    height = 250,
    r = 2;

//var svg = d3.select("body").append("svg")
var svg = d3.select("#profile-graph").append("svg")
    .attr("width", width)
    .attr("height", height);

<% if current_user == @user %>
  var graph_string = "<%= @user.graph %>";
<% else %>
  var graph_string = "<%= @user.graph_public %>";
<% end %>

var graph_string = graph_string.replace(/&quot;/ig,'"');
var graph_json = JSON.parse(graph_string);

var ed_nodes = graph_json.nodes;
var ed_links = graph_json.links;

var total_value = 0;

for(var i = 0; i < ed_nodes.length; i++) {
	total_value += ed_nodes[i].value;
}

//function node_radius(d) { return (d.value / total_value)*100 };
function node_radius(d) { return (d.value / total_value) *60 + 10 };

function node_url(d) { return "<%= user_path(@user) %>".concat("?query=").concat(d.name)}


var k = Math.sqrt(ed_nodes.length / (width * height ));

var force = d3.layout.force()
    .gravity(100 * k)
 /*   .distance(100) */
    .charge(-10 / k)
    .size([width, height])
    .linkDistance(200)
    .nodes(ed_nodes)
    .links(ed_links)
    .start();

  var link = svg.selectAll(".link")
      .data(ed_links)
    .enter().append("line")
      .attr("class", "link");

  var node = svg.selectAll(".node")
      .data(ed_nodes)
    .enter().append("g")
      .attr("class", "node")
      .call(force.drag);

  node.append("circle")
  	.attr("r", node_radius)
  	.attr("opacity", 1);

  node.append("svg:a")
    .attr("xlink:href", node_url)
      .append("text")
      .attr("x", 0)
      .attr("dy", ".35em")
      .attr("text-anchor", "middle")
      .attr("font-size", node_radius)
      .text(function(d) { return d.name });

/*
  node.append("text")
    .attr("x", 0)
    .attr("dy", ".35em")
    .attr("text-anchor", "middle")
    .attr("font-size", node_radius)
    .text(function(d) { return d.name });
    */

  force.on("tick", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

   node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

// Bounding Box solution
 //node.attr("cx", function(d) { return d.x = Math.max(r, Math.min(width - r, d.x)); })
 //       .attr("cy", function(d) { return d.y = Math.max(r, Math.min(height - r, d.y)); });



});
</script>

