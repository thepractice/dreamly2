<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

var width = 250,
    height = 250,
    r = 2;

//var svg = d3.select("body").append("svg")
var svg = d3.select("#profile-graph").append("svg")
    .attr("width", width)
    .attr("height", height);


  var graph_string = "<%= @graph_text %>";


var graph_string = graph_string.replace(/&quot;/ig,'"');
var graph_json = JSON.parse(graph_string);

var ed_nodes = graph_json.nodes;

var total_value = 0;

for(var i = 0; i < ed_nodes.length; i++) {
	total_value += ed_nodes[i].value;
}

//function node_radius(d) { return (d.value / total_value)*100 };
function node_radius(d) { return (d.value / total_value) *60 + 10 };

function node_url(d) { return "<%= dreams_path %>".concat("?query=").concat(d.name)}
var color = d3.scale.category20();

var k = Math.sqrt(ed_nodes.length / (width * height ));

var force = d3.layout.force()
    .gravity(150 * k)
 /*   .distance(100) */
    .charge(-40 / k)
    .size([width, height])
    .nodes(ed_nodes)
    .start();

  var node = svg.selectAll(".node")
      .data(ed_nodes)
    .enter().append("g")
      .attr("class", "node")
      .call(force.drag);

  var text = node.append("svg:a")
    .attr("xlink:href", node_url)
      .append("text")
      .attr("x", 0)
      .attr("dy", ".35em")
      .attr("text-anchor", "middle")
      .attr("font-size", node_radius)
      .attr("fill", function (d,i) { return color(i); })
      .text(function(d) { return d.name });

  var bbox_array = [];
  text.each(function (d,i) {
    bbox_array.push(this.getBBox());
  });      

  node.insert("rect", "a")
    .attr("x", function (d,i) { return bbox_array[i].x })
    .attr("y", function (d,i) { return bbox_array[i].y })
    .attr("width", function (d,i) { return bbox_array[i].width })
    .attr("height", function (d,i) { return bbox_array[i].height })
    .style("fill", function (d,i) { return 'white'; })
    .attr("opacity", 1);

/*
  node.append("text")
    .attr("x", 0)
    .attr("dy", ".35em")
    .attr("text-anchor", "middle")
    .attr("font-size", node_radius)
    .text(function(d) { return d.name });
    */

  force.on("tick", function() {


   node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

// Bounding Box solution
 //node.attr("cx", function(d) { return d.x = Math.max(r, Math.min(width - r, d.x)); })
 //       .attr("cy", function(d) { return d.y = Math.max(r, Math.min(height - r, d.y)); });



});
</script>

