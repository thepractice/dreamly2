<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

var width = 250,
    height = 250,
    r = 2;

//var svg = d3.select("body").append("svg")
var svg = d3.select("#panel2-1").append("svg")
    .attr("width", width)
    .attr("height", height);

var ed_nodes = [
    {
        'name': 'love',
        'size': 30
    },
    {
        'name': 'beauty',
        'size': 30
    },
    {
        'name': 'dark',
        'size': 20
    },
    {
        'name': 'freedom',
        'size': 20
    },
    {
        'name': 'dragon',
        'size': 12
    },
    {
        'name': 'blue',
        'size': 12
    }
];

var ed_links = [
    {
        source: 0,
        target: 1
    },
    {
        source: 1,
        target: 2
    },
    {
        source: 1,
        target: 5
    },
    {
        source: 3,
        target: 4
    },
    {
        source: 0,
        target: 2
    },
];

//function node_radius(d) { return (d.value / total_value)*100 };
function node_radius(d) { return d.size };
function text_offset(d) { return - d.size };

var k = Math.sqrt(ed_nodes.length / (width * height ));

var force = d3.layout.force()
    .gravity(150 * k)
 /*   .distance(100) */
    .charge(-40 / k)
    .size([width, height])
    .linkDistance(100)
    .nodes(ed_nodes)
    .links(ed_links)
    .start();

  var link = svg.selectAll(".link")
      .data(ed_links)
    .enter().append("line")
      .attr("class", "link");

  var node = svg.selectAll(".node")
      .data(ed_nodes)
    .enter().append("g")
      .attr("class", "node")
      .call(force.drag);

  node.append("circle")
  	.attr("r", node_radius)
  	.attr("opacity", 1);

  node.append("text")
      .attr("dx", 0)
      .attr("dy", ".35em")
      .attr("text-anchor", "middle")
      .attr("fill", "#875756")
      .attr("font-size", node_radius)
      .text(function(d) { return d.name });

  force.on("tick", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

// Bounding Box solution
 //node.attr("cx", function(d) { return d.x = Math.max(r, Math.min(width - r, d.x)); })
 //       .attr("cy", function(d) { return d.y = Math.max(r, Math.min(height - r, d.y)); });



  });

</script>

